package org.example;

import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

public class SudokuSolverTest {
    SudokuSolver solution = new SudokuSolver();

    @Test
    public void test1() {
        char[] input = new char[]{
            '5', '3', '.', '.', '7', '.', '.', '.', '.',
            '6', '.', '.', '1', '9', '5', '.', '.', '.',
            '.', '9', '8', '.', '.', '.', '.', '6', '.',

            '8', '.', '.', '.', '6', '.', '.', '.', '3',
            '4', '.', '.', '8', '.', '3', '.', '.', '1',
            '7', '.', '.', '.', '2', '.', '.', '.', '6',

            '.', '6', '.', '.', '.', '.', '2', '8', '.',
            '.', '.', '.', '4', '1', '9', '.', '.', '5',
            '.', '.', '.', '.', '8', '.', '.', '7', '9'
        };

        char[] output = new char[]{
            '5', '3', '4', '6', '7', '8', '9', '1', '2',
            '6', '7', '2', '1', '9', '5', '3', '4', '8',
            '1', '9', '8', '3', '4', '2', '5', '6', '7',

            '8', '5', '9', '7', '6', '1', '4', '2', '3',
            '4', '2', '6', '8', '5', '3', '7', '9', '1',
            '7', '1', '3', '9', '2', '4', '8', '5', '6',

            '9', '6', '1', '5', '3', '7', '2', '8', '4',
            '2', '8', '7', '4', '1', '9', '6', '3', '5',
            '3', '4', '5', '2', '8', '6', '1', '7', '9'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test2() {
        char[] input = new char[]{
            '.', '.', '9', '7', '4', '8', '.', '.', '.',
            '7', '.', '.', '.', '.', '.', '.', '.', '.',
            '.', '2', '.', '1', '.', '9', '.', '.', '.',

            '.', '.', '7', '.', '.', '.', '2', '4', '.',
            '.', '6', '4', '.', '1', '.', '5', '9', '.',
            '.', '9', '8', '.', '.', '.', '3', '.', '.',

            '.', '.', '.', '8', '.', '3', '.', '2', '.',
            '.', '.', '.', '.', '.', '.', '.', '.', '6',
            '.', '.', '.', '2', '7', '5', '9', '.', '.'
        };

        char[] output = new char[]{
            '5', '1', '9', '7', '4', '8', '6', '3', '2',
            '7', '8', '3', '6', '5', '2', '4', '1', '9',
            '4', '2', '6', '1', '3', '9', '8', '7', '5',

            '3', '5', '7', '9', '8', '6', '2', '4', '1',
            '2', '6', '4', '3', '1', '7', '5', '9', '8',
            '1', '9', '8', '5', '2', '4', '3', '6', '7',

            '9', '7', '5', '8', '6', '3', '1', '2', '4',
            '8', '3', '2', '4', '9', '1', '7', '5', '6',
            '6', '4', '1', '2', '7', '5', '9', '8', '3'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test3() {
        char[] input = new char[]{
            '.', '.', '.', '.', '.', '.', '.', '.', '.',
            '.', '.', '.', '.', '.', '3', '.', '8', '5',
            '.', '.', '1', '.', '2', '.', '.', '.', '.',

            '.', '.', '.', '5', '.', '7', '.', '.', '.',
            '.', '.', '4', '.', '.', '.', '1', '.', '.',
            '.', '9', '.', '.', '.', '.', '.', '.', '.',

            '5', '.', '.', '.', '.', '.', '.', '7', '3',
            '.', '.', '2', '.', '1', '.', '.', '.', '.',
            '.', '.', '.', '.', '4', '.', '.', '.', '9'
        };

        char[] output = new char[]{
            '9', '8', '7', '6', '5', '4', '3', '2', '1',
            '2', '4', '6', '1', '7', '3', '9', '8', '5',
            '3', '5', '1', '9', '2', '8', '7', '4', '6',

            '1', '2', '8', '5', '3', '7', '6', '9', '4',
            '6', '3', '4', '8', '9', '2', '1', '5', '7',
            '7', '9', '5', '4', '6', '1', '8', '3', '2',

            '5', '1', '9', '2', '8', '6', '4', '7', '3',
            '4', '7', '2', '3', '1', '9', '5', '6', '8',
            '8', '6', '3', '7', '4', '5', '2', '1', '9'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test4() {
        char[] input = new char[]{
            '5', '.', '.', '.', '1', '.', '.', '.', '4',
            '2', '7', '4', '.', '.', '.', '6', '.', '.',
            '.', '8', '.', '9', '.', '4', '.', '.', '.',

            '8', '1', '.', '4', '6', '.', '3', '.', '2',
            '.', '.', '2', '.', '3', '.', '1', '.', '.',
            '7', '.', '6', '.', '9', '1', '.', '5', '8',

            '.', '.', '.', '5', '.', '3', '.', '1', '.',
            '.', '.', '5', '.', '.', '.', '9', '2', '7',
            '1', '.', '.', '.', '2', '.', '.', '.', '3'
        };

        char[] output = new char[]{
            '5', '9', '3', '6', '1', '2', '7', '8', '4',
            '2', '7', '4', '3', '5', '8', '6', '9', '1',
            '6', '8', '1', '9', '7', '4', '2', '3', '5',

            '8', '1', '9', '4', '6', '5', '3', '7', '2',
            '4', '5', '2', '8', '3', '7', '1', '6', '9',
            '7', '3', '6', '2', '9', '1', '4', '5', '8',

            '9', '2', '7', '5', '4', '3', '8', '1', '6',
            '3', '4', '5', '1', '8', '6', '9', '2', '7',
            '1', '6', '8', '7', '2', '9', '5', '4', '3'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test5() {
        char[] input = new char[]{
            '.', '4', '.', '.', '.', '7', '8', '.', '2',
            '1', '.', '.', '.', '9', '.', '.', '.', '5',
            '.', '.', '.', '.', '8', '4', '.', '.', '.',

            '.', '5', '.', '.', '7', '2', '.', '.', '.',
            '.', '.', '.', '.', '.', '.', '.', '.', '.',
            '.', '8', '7', '5', '4', '9', '.', '.', '.',

            '6', '9', '.', '.', '.', '.', '.', '.', '.',
            '.', '.', '.', '.', '.', '.', '.', '6', '1',
            '.', '.', '5', '.', '.', '.', '4', '.', '.'
        };

        char[] output = new char[]{
            '9', '4', '6', '1', '5', '7', '8', '3', '2',
            '1', '2', '8', '3', '9', '6', '7', '4', '5',
            '5', '7', '3', '2', '8', '4', '1', '9', '6',

            '3', '5', '1', '6', '7', '2', '9', '8', '4',
            '4', '6', '9', '8', '3', '1', '2', '5', '7',
            '2', '8', '7', '5', '4', '9', '6', '1', '3',

            '6', '9', '2', '4', '1', '5', '3', '7', '8',
            '7', '3', '4', '9', '2', '8', '5', '6', '1',
            '8', '1', '5', '7', '6', '3', '4', '2', '9'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test6() {
        char[] input = new char[]{
            '6', '.', '.', '.', '.', '.', '5', '3', '.',
            '.', '.', '.', '.', '.', '2', '7', '.', '.',
            '5', '.', '7', '.', '9', '6', '.', '1', '8',

            '.', '.', '6', '.', '.', '1', '.', '8', '.',
            '.', '9', '8', '.', '.', '.', '.', '.', '.',
            '.', '.', '.', '.', '2', '.', '.', '.', '.',

            '.', '.', '.', '.', '.', '.', '9', '.', '.',
            '.', '.', '.', '2', '.', '.', '.', '4', '3',
            '3', '1', '.', '.', '.', '9', '.', '6', '2'
        };

        char[] output = new char[]{
            '6', '2', '9', '1', '8', '7', '5', '3', '4',
            '1', '8', '3', '5', '4', '2', '7', '9', '6',
            '5', '4', '7', '3', '9', '6', '2', '1', '8',

            '2', '5', '6', '9', '3', '1', '4', '8', '7',
            '4', '9', '8', '6', '7', '5', '3', '2', '1',
            '7', '3', '1', '8', '2', '4', '6', '5', '9',

            '8', '6', '2', '4', '1', '3', '9', '7', '5',
            '9', '7', '5', '2', '6', '8', '1', '4', '3',
            '3', '1', '4', '7', '5', '9', '8', '6', '2'
        };

        assertThat(solution.solve(input), is(output));
    }

    @Test
    public void test7() {
        char[] input = new char[]{
            '.', '.', '.', '7', '.', '.', '.', '.', '.',
            '1', '.', '.', '.', '.', '.', '.', '.', '.',
            '.', '.', '.', '4', '3', '.', '2', '.', '.',

            '.', '.', '.', '.', '.', '.', '.', '.', '6',
            '.', '.', '.', '5', '.', '9', '.', '.', '.',
            '.', '.', '.', '.', '.', '.', '4', '1', '8',

            '.', '.', '.', '.', '8', '1', '.', '.', '.',
            '.', '.', '2', '.', '.', '.', '.', '5', '.',
            '.', '4', '.', '.', '.', '.', '3', '.', '.'
        };

        char[] output = new char[]{
            '2', '6', '4', '7', '1', '5', '8', '3', '9',
            '1', '3', '7', '8', '9', '2', '6', '4', '5',
            '5', '9', '8', '4', '3', '6', '2', '7', '1',

            '4', '2', '3', '1', '7', '8', '5', '9', '6',
            '8', '1', '6', '5', '4', '9', '7', '2', '3',
            '7', '5', '9', '6', '2', '3', '4', '1', '8',

            '3', '7', '5', '2', '8', '1', '9', '6', '4',
            '9', '8', '2', '3', '6', '4', '1', '5', '7',
            '6', '4', '1', '9', '5', '7', '3', '8', '2'
        };

        assertThat(solution.solve(input), is(output));
    }
}